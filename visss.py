
import io
import base64
import json
import os
from PIL import Image
import streamlit as st
from google import genai
from dotenv import load_dotenv
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Image as RLImage
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

# -----------------------------
# CONFIGURATION
# -----------------------------
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
MODEL_NAME = "gemini-2.0-flash"
ANALYST_NAME = "AI Analyst - Gemini"

st.set_page_config(page_title="Gemini Chart Analyzer", page_icon="üìä", layout="wide")

# -----------------------------
# STYLED HEADER
# -----------------------------
st.markdown("""
    <style>
    .main-title {
        text-align: center;
        font-size: 38px;
        font-weight: bold;
        color: #1B2A49;
        margin-bottom: 4px;
    }
    .subtitle {
        text-align: center;
        font-size: 18px;
        color: #5f6368;
        margin-bottom: 20px;
    }
    .stButton>button {
        background-color: #1B2A49;
        color: white;
        border-radius: 8px;
        padding: 0.6em 1.3em;
        font-size: 16px;
        border: none;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="main-title">üìà Gemini Business Chart Analyzer</h1>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">AI-powered chart insights & professional report generation</p>', unsafe_allow_html=True)

# -----------------------------
# GEMINI CLIENT
# -----------------------------
client = genai.Client(api_key=api_key)

# -----------------------------
# INPUTS
# -----------------------------
col1, col2 = st.columns([2, 1])
with col1:
    analysis_mode = st.selectbox(
        "Select Analysis Type",
        ["Technical Insights", "Business Summary", "Executive Overview"]
    )

files = st.file_uploader(
    "Upload your chart images",
    type=["png", "jpg", "jpeg", "webp"],
    accept_multiple_files=True
)

# -----------------------------
# PREDEFINED PROMPTS
# -----------------------------
prompts = {
    "Technical Insights": (
        "Analyze each chart for:\n"
        "1. Axes labels & units\n"
        "2. Key trends, patterns, and outliers\n"
        "3. Statistical observations\n"
        "4. 3 concise, data-driven insights\n"
        "Return structured JSON with these fields: "
        "[{\"image\": \"<filename>\", \"axes\": {}, \"summary\": \"\", \"insights\": []}]"
    ),
    "Business Summary": (
        "Summarize each chart in business terms:\n"
        "1. What performance trends the data implies\n"
        "2. Growth or risk factors\n"
        "3. 3 actionable recommendations\n"
        "Return JSON with: image, summary, business_insights."
    ),
    "Executive Overview": (
        "Create a one-page executive summary:\n"
        "1. The overall story across all charts\n"
        "2. Business implications\n"
        "3. Key takeaways in bullet form.\n"
        "Return a short Markdown summary."
    )
}

# -----------------------------
# HELPER FUNCTIONS
# -----------------------------
def pil_to_b64(img: Image.Image) -> str:
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    return base64.b64encode(buf.getvalue()).decode("utf-8")

def parse_output(output_text: str):
    json_block, summary = None, None
    if "---" in output_text:
        json_block, summary = output_text.split("---", 1)
    else:
        start, end = output_text.find("["), output_text.rfind("]")
        if start != -1 and end != -1:
            json_block = output_text[start:end+1]
    try:
        parsed = json.loads(json_block)
        return parsed, summary
    except Exception:
        return None, output_text

def generate_pdf(parsed, summary=None, chart_images=None):
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=A4, leftMargin=40, rightMargin=40, topMargin=60)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="SectionTitle", fontSize=14, leading=18, textColor=colors.HexColor("#1B2A49"), spaceAfter=8))
    styles.add(ParagraphStyle(name="Body", fontSize=11, leading=15))

    elements = []

    # Header section
    elements.append(Paragraph("<b>Gemini Business Chart Insights Report</b>", styles["Title"]))
    elements.append(Paragraph(f"Generated by: {ANALYST_NAME}", styles["Normal"]))
    elements.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles["Normal"]))
    elements.append(Spacer(1, 15))

    # Charts and Analysis
    if parsed:
        for i, item in enumerate(parsed, start=1):
            elements.append(Paragraph(f"<b>Chart {i}</b>", styles["SectionTitle"]))

            # Embed chart image
            if chart_images and i-1 < len(chart_images):
                img = chart_images[i-1]
                img_buf = io.BytesIO()
                img.save(img_buf, format="PNG")
                img_buf.seek(0)
                elements.append(RLImage(img_buf, width=400, height=220))
                elements.append(Spacer(1, 8))

            if isinstance(item, dict):
                for k, v in item.items():
                    if isinstance(v, str):
                        elements.append(Paragraph(f"<b>{k.title()}:</b> {v}", styles["Body"]))
                        elements.append(Spacer(1, 3))
                    elif isinstance(v, list):
                        elements.append(Paragraph(f"<b>{k.title()}:</b>", styles["Body"]))
                        for sub in v:
                            elements.append(Paragraph(f"‚Ä¢ {sub}", styles["Body"]))
                        elements.append(Spacer(1, 3))
            elements.append(Spacer(1, 12))

    if summary:
        elements.append(Spacer(1, 15))
        elements.append(Paragraph("<b>Executive Summary</b>", styles["SectionTitle"]))
        elements.append(Paragraph(summary.strip(), styles["Body"]))

    doc.build(elements)
    buf.seek(0)
    return buf

# -----------------------------
# MAIN WORKFLOW
# -----------------------------
if files and st.button("üîç Analyze Charts"):
    previews = []
    parts = [{"role": "user", "parts": [{"text": prompts[analysis_mode]}]}]

    for f in files:
        data = f.read()
        img = Image.open(io.BytesIO(data)).convert("RGB")
        previews.append(img)
        parts[0]["parts"].append({
            "inline_data": {"mime_type": "image/png", "data": pil_to_b64(img)}
        })

    st.subheader("Uploaded Charts")
    cols = st.columns(min(3, len(previews)))
    for i, img in enumerate(previews):
        cols[i % len(cols)].image(img, caption=f"Chart {i+1}", use_container_width=True)

    with st.spinner(f"Analyzing using {MODEL_NAME}..."):
        try:
            result = client.models.generate_content(model=MODEL_NAME, contents=parts)
            output_text = result.text
        except Exception as e:
            st.error(f"Error: {e}")
            st.stop()

    parsed, summary = parse_output(output_text)
    st.success("‚úÖ Analysis Complete!")

    st.subheader("AI-Generated Insights")
    if parsed:
        for item in parsed:
            if isinstance(item, dict):
                st.markdown(f"### üìà {item.get('image', 'Chart Analysis')}")
                st.json(item)
            else:
                st.write(item)
    else:
        st.markdown(summary or output_text)

    pdf_buffer = generate_pdf(parsed or [], summary, chart_images=previews)
    file_label = analysis_mode.replace(" ", "_")
    st.download_button(
        f"üìÑ Download {analysis_mode} Report (PDF)",
        pdf_buffer,
        file_name=f"Gemini_{file_label}_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
        mime="application/pdf"
    )

else:
    st.info("üì§ Upload your charts and click **Analyze Charts** to get insights.")
