

import os
import io
import base64
import tempfile
from datetime import datetime
from typing import List, Dict, Any

import streamlit as st
from dotenv import load_dotenv
from PIL import Image
from google import genai
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet

# =========================
# Streamlit Config
# =========================

st.set_page_config(page_title="Gemini Chart Analyzer", page_icon="üìä", layout="wide")
st.title("üìä Gemini Chart Analyzer")

# =========================
# Session State Defaults
# =========================
def _init_state():
    st.session_state.setdefault("uploads", [])
    st.session_state.setdefault("analysis_summary", "")
    st.session_state.setdefault("model_name", "gemini-2.0-flash")
    st.session_state.setdefault("word_limit", 200)
    st.session_state.setdefault("output_style", "Structured (bulleted)")
    st.session_state.setdefault("audience", "Business Professional")
    st.session_state.setdefault("conversation", [])
    st.session_state.setdefault("insight_focus", "General Overview")
    st.session_state.setdefault("theme_mode", "Light")

_init_state()

# =========================
# Env & Client
# =========================
load_dotenv()
API_KEY = os.getenv("GEMINI_API_KEY")
if not API_KEY:
    st.error("‚ö†Ô∏è GEMINI_API_KEY missing. Create a .env file with GEMINI_API_KEY=your_key")
    st.stop()

client = genai.Client(api_key=API_KEY)
MODEL_CHOICES = ["gemini-2.0-flash", "gemini-2.0-pro"]

# =========================
# Utilities
# =========================
def guess_mime(name: str) -> str:
    nl = name.lower()
    if nl.endswith(".png"): return "image/png"
    if nl.endswith(".webp"): return "image/webp"
    if nl.endswith(".bmp"): return "image/bmp"
    return "image/jpeg"

def decode_uploaded_files(files) -> List[Dict[str, Any]]:
    out = []
    if not files:
        return out
    for f in files:
        data = f.getvalue()
        if not data or len(data) < 10:
            st.warning(f"‚ö†Ô∏è {f.name} is empty or corrupted. Skipping.")
            continue
        try:
            img = Image.open(io.BytesIO(data)).convert("RGB")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Skipping {f.name}: not a valid image ({e})")
            continue
        b64 = base64.b64encode(data).decode("utf-8")
        out.append({
            "name": f.name, "data": data, "img": img, "b64": b64, "mime": guess_mime(f.name)
        })
    return out

def _overview_and_bullets(word_limit: int):
    short = word_limit <= 150
    overview_lines = "1‚Äì2 lines" if short else "2‚Äì3 lines"
    bullet_points = "3‚Äì4 bullet points" if short else "5‚Äì6 bullet points"
    length_instruction = "Keep it concise." if short else "Elaborate clearly but stay focused."
    return overview_lines, bullet_points, length_instruction

# =========================
# Gemini Call
# =========================
def generate_individual_insight_from_rec(
    rec: Dict[str, Any],
    audience: str,
    word_limit: int,
    model_name: str,
    output_style: str,
    insight_focus: str
) -> str:
    overview_lines, bullet_points, length_instruction = _overview_and_bullets(word_limit)
    tone_note = "business-friendly" if audience == "Business Professional" else "technically precise"

    prompt = f"""
You are a professional data analyst.
Analyze the uploaded chart image and provide insights with a focus on **{insight_focus}**.

Audience: {audience}.
Instructions:
1) Begin with an overview summary ({overview_lines}).
2) Follow with key findings and insights ({bullet_points}).
3) Keep the tone {tone_note}.
4) {length_instruction}
5) Limit total response to around {word_limit} words.
6) {"Use concise bullet points." if output_style.startswith("Structured") else "Write as a short narrative paragraph."}
"""

    contents = [{
        "role": "user",
        "parts": [
            {"text": prompt},
            {"inline_data": {"mime_type": rec["mime"], "data": rec["b64"]}},
        ],
    }]

    try:
        response = client.models.generate_content(model=model_name, contents=contents)
        return (getattr(response, "text", "") or "").strip() or "No insights generated."
    except Exception as e:
        return f"API Error: {e}"

# =========================
# PDF Report Generator
# =========================
def generate_pdf_report(uploads, summary_text):
    if not uploads or not summary_text:
        st.warning("No analysis data available to export.")
        return

    styles = getSampleStyleSheet()
    story = []

    story.append(Paragraph("<b>üìä Gemini Chart Analysis Report</b>", styles["Title"]))
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles["Normal"]))
    story.append(Paragraph("Generated by: Gemini Chart Analyzer", styles["Normal"]))
    story.append(Spacer(1, 20))

    for rec in uploads:
        story.append(Paragraph(f"<b>{rec['name']}</b>", styles["Heading2"]))
        img_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        rec["img"].save(img_temp.name)
        story.append(RLImage(img_temp.name, width=400, height=250))
        story.append(Spacer(1, 10))
    story.append(Paragraph("<b>Analysis Summary:</b>", styles["Heading2"]))
    story.append(Paragraph(summary_text.replace("\n", "<br/>"), styles["Normal"]))

    pdf_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    doc = SimpleDocTemplate(pdf_temp.name, pagesize=A4)
    doc.build(story)

    with open(pdf_temp.name, "rb") as f:
        st.download_button("‚¨áÔ∏è Download PDF Report", f, "Chart_Analysis_Report.pdf", mime="application/pdf")

# =========================
# Sidebar Controls
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è Settings")
    st.session_state.model_name = st.selectbox("Model", MODEL_CHOICES, index=0)
    st.session_state.word_limit = st.slider("Word limit", 80, 600, st.session_state.word_limit, step=20)
    st.session_state.output_style = st.selectbox("Output format", ["Structured (bulleted)", "Narrative (story)"])
    st.session_state.audience = st.selectbox("Audience", ["Business Professional", "Data Scientist"])
    st.session_state.insight_focus = st.selectbox("Insight Focus", ["General Overview", "Trends", "Comparisons", "Anomalies", "Business Impact"])
    st.session_state.theme_mode = st.radio("Theme", ["Light", "Dark"])
    st.markdown("---")
    st.subheader("üìÑ Export Options")
    if st.button("‚¨áÔ∏è Generate PDF Report"):
        generate_pdf_report(st.session_state.uploads, st.session_state.analysis_summary)
    if st.button("üíæ Download Chat History"):
        if st.session_state.conversation:
            chat_text = "\n\n".join([f"User: {m['user']}\nAssistant: {m['assistant']}" for m in st.session_state.conversation])
            st.download_button("Download Chat", chat_text, "conversation.txt")
        else:
            st.info("No chat history yet.")

# =========================
# Tabs for App
# =========================
home_tab, ask_tab = st.tabs(["üè† Home", "üí¨ Ask a question"])

with home_tab:
    files = st.file_uploader("Upload chart images", type=["png", "jpg", "jpeg", "webp", "bmp", "jfif"], accept_multiple_files=True)
    if files:
        st.session_state.uploads = decode_uploaded_files(files)

    if st.button("üîç Analyze Charts", type="primary"):
        if not st.session_state.uploads:
            st.error("Please upload at least one chart to analyze.")
        else:
            model_name = st.session_state.model_name
            audience = st.session_state.audience
            word_limit = st.session_state.word_limit
            output_style = st.session_state.output_style
            insight_focus = st.session_state.insight_focus

            summary_blocks = []

            progress = st.progress(0)
            for idx, rec in enumerate(st.session_state.uploads, start=1):
                st.markdown(f"### üìà Chart {idx} ‚Äî {rec['name']}")
                col_chart, col_insight = st.columns([1, 2], gap="large")
                with col_chart:
                    st.image(rec["img"], caption=rec["name"], use_container_width=True)
                with col_insight:
                    with st.spinner(f"Analyzing {rec['name']} with {model_name}..."):
                        insight = generate_individual_insight_from_rec(
                            rec, audience, word_limit, model_name, output_style, insight_focus
                        )
                    st.markdown(insight)
                    summary_blocks.append(f"Chart {idx} ({rec['name']}):\n{insight}")
                progress.progress(idx / len(st.session_state.uploads))

            st.session_state.analysis_summary = "\n\n---\n\n".join(summary_blocks)
            st.toast("‚úÖ Analysis complete! Switch to the Ask tab to explore insights.")

with ask_tab:
    st.header("‚ùì Ask a question about the analyzed charts")
    if not st.session_state.analysis_summary:
        st.info("No analysis found. Please analyze charts on the Home tab first.")
    else:
        user_input = st.chat_input("Type your question...")
        if user_input:
            prompt = (
                "Answer based only on the analysis below.\n\n"
                f"Context:\n{st.session_state.analysis_summary}\n\n"
                "Question: " + user_input
            )
            contents = [{"role": "user", "parts": [{"text": prompt}]}]
            with st.spinner(f"Getting answer from {st.session_state.model_name}..."):
                try:
                    res = client.models.generate_content(
                        model=st.session_state.model_name,
                        contents=contents
                    )
                    answer = (res.text or "").strip()
                except Exception as e:
                    st.error(f"API Error: {e}")
                    answer = ""
            if answer:
                st.session_state.conversation.append({"user": user_input, "assistant": answer})

        for msg in st.session_state.conversation:
            st.chat_message("user").markdown(msg["user"])
            st.chat_message("assistant").markdown(msg["assistant"])

        with st.expander("üìã Analysis Summary", expanded=False):
            st.markdown(st.session_state.analysis_summary)





